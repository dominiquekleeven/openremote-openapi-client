# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictInt, StrictStr
from typing import Any, Dict, List, Optional
from openremote_openapi_client.models.notification import Notification
from openremote_openapi_client.models.sent_notification import SentNotification

from openremote_openapi_client.api_client import ApiClient, RequestSerialized
from openremote_openapi_client.api_response import ApiResponse
from openremote_openapi_client.rest import RESTResponseType


class NotificationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_notifications(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        type: Optional[StrictStr] = None,
        var_from: Optional[StrictInt] = None,
        to: Optional[StrictInt] = None,
        realm_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        asset_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SentNotification]:
        """Retrieve all sent notifications by targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param id:
        :type id: int
        :param type:
        :type type: str
        :param var_from:
        :type var_from: int
        :param to:
        :type to: int
        :param realm_id:
        :type realm_id: str
        :param user_id:
        :type user_id: str
        :param asset_id:
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_notifications_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            id=id,
            type=type,
            var_from=var_from,
            to=to,
            realm_id=realm_id,
            user_id=user_id,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SentNotification]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_notifications_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        type: Optional[StrictStr] = None,
        var_from: Optional[StrictInt] = None,
        to: Optional[StrictInt] = None,
        realm_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        asset_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SentNotification]]:
        """Retrieve all sent notifications by targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param id:
        :type id: int
        :param type:
        :type type: str
        :param var_from:
        :type var_from: int
        :param to:
        :type to: int
        :param realm_id:
        :type realm_id: str
        :param user_id:
        :type user_id: str
        :param asset_id:
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_notifications_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            id=id,
            type=type,
            var_from=var_from,
            to=to,
            realm_id=realm_id,
            user_id=user_id,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SentNotification]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_notifications_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        type: Optional[StrictStr] = None,
        var_from: Optional[StrictInt] = None,
        to: Optional[StrictInt] = None,
        realm_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        asset_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve all sent notifications by targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param id:
        :type id: int
        :param type:
        :type type: str
        :param var_from:
        :type var_from: int
        :param to:
        :type to: int
        :param realm_id:
        :type realm_id: str
        :param user_id:
        :type user_id: str
        :param asset_id:
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_notifications_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            id=id,
            type=type,
            var_from=var_from,
            to=to,
            realm_id=realm_id,
            user_id=user_id,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SentNotification]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_notifications_serialize(
        self,
        authorization,
        x_forwarded_proto,
        x_forwarded_host,
        id,
        type,
        var_from,
        to,
        realm_id,
        user_id,
        asset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if realm_id is not None:
            
            _query_params.append(('realmId', realm_id))
            
        if user_id is not None:
            
            _query_params.append(('userId', user_id))
            
        if asset_id is not None:
            
            _query_params.append(('assetId', asset_id))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_forwarded_proto is not None:
            _header_params['X-Forwarded-Proto'] = x_forwarded_proto
        if x_forwarded_host is not None:
            _header_params['X-Forwarded-Host'] = x_forwarded_host
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'openid', 
            'openid'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/notification',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def notification_acknowledged(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        target_id: Optional[StrictStr] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a notification as acknowledged


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param target_id:
        :type target_id: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_acknowledged_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            target_id=target_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def notification_acknowledged_with_http_info(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        target_id: Optional[StrictStr] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a notification as acknowledged


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param target_id:
        :type target_id: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_acknowledged_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            target_id=target_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def notification_acknowledged_without_preload_content(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        target_id: Optional[StrictStr] = None,
        body: Optional[Dict[str, Any]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a notification as acknowledged


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param target_id:
        :type target_id: str
        :param body:
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_acknowledged_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            target_id=target_id,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _notification_acknowledged_serialize(
        self,
        notification_id,
        authorization,
        x_forwarded_proto,
        x_forwarded_host,
        target_id,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if notification_id is not None:
            _path_params['notificationId'] = notification_id
        # process the query parameters
        if target_id is not None:
            
            _query_params.append(('targetId', target_id))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_forwarded_proto is not None:
            _header_params['X-Forwarded-Proto'] = x_forwarded_proto
        if x_forwarded_host is not None:
            _header_params['X-Forwarded-Host'] = x_forwarded_host
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'openid', 
            'openid'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/notification/{notificationId}/acknowledged',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def notification_delivered(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        target_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a notification as delivered


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param target_id:
        :type target_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_delivered_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            target_id=target_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def notification_delivered_with_http_info(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        target_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a notification as delivered


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param target_id:
        :type target_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_delivered_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            target_id=target_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def notification_delivered_without_preload_content(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        target_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a notification as delivered


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param target_id:
        :type target_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_delivered_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            target_id=target_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _notification_delivered_serialize(
        self,
        notification_id,
        authorization,
        x_forwarded_proto,
        x_forwarded_host,
        target_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if notification_id is not None:
            _path_params['notificationId'] = notification_id
        # process the query parameters
        if target_id is not None:
            
            _query_params.append(('targetId', target_id))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_forwarded_proto is not None:
            _header_params['X-Forwarded-Proto'] = x_forwarded_proto
        if x_forwarded_host is not None:
            _header_params['X-Forwarded-Host'] = x_forwarded_host
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'openid', 
            'openid'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/notification/{notificationId}/delivered',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_notification(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a sent notification


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_notification_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_notification_with_http_info(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a sent notification


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_notification_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_notification_without_preload_content(
        self,
        notification_id: StrictInt,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a sent notification


        :param notification_id: (required)
        :type notification_id: int
        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_notification_serialize(
            notification_id=notification_id,
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_notification_serialize(
        self,
        notification_id,
        authorization,
        x_forwarded_proto,
        x_forwarded_host,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if notification_id is not None:
            _path_params['notificationId'] = notification_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_forwarded_proto is not None:
            _header_params['X-Forwarded-Proto'] = x_forwarded_proto
        if x_forwarded_host is not None:
            _header_params['X-Forwarded-Host'] = x_forwarded_host
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'openid', 
            'openid'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/notification/{notificationId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_notifications(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        type: Optional[StrictStr] = None,
        var_from: Optional[StrictInt] = None,
        to: Optional[StrictInt] = None,
        realm_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        asset_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete all sent notifications by targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param id:
        :type id: int
        :param type:
        :type type: str
        :param var_from:
        :type var_from: int
        :param to:
        :type to: int
        :param realm_id:
        :type realm_id: str
        :param user_id:
        :type user_id: str
        :param asset_id:
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_notifications_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            id=id,
            type=type,
            var_from=var_from,
            to=to,
            realm_id=realm_id,
            user_id=user_id,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_notifications_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        type: Optional[StrictStr] = None,
        var_from: Optional[StrictInt] = None,
        to: Optional[StrictInt] = None,
        realm_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        asset_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete all sent notifications by targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param id:
        :type id: int
        :param type:
        :type type: str
        :param var_from:
        :type var_from: int
        :param to:
        :type to: int
        :param realm_id:
        :type realm_id: str
        :param user_id:
        :type user_id: str
        :param asset_id:
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_notifications_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            id=id,
            type=type,
            var_from=var_from,
            to=to,
            realm_id=realm_id,
            user_id=user_id,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_notifications_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        type: Optional[StrictStr] = None,
        var_from: Optional[StrictInt] = None,
        to: Optional[StrictInt] = None,
        realm_id: Optional[StrictStr] = None,
        user_id: Optional[StrictStr] = None,
        asset_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all sent notifications by targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param id:
        :type id: int
        :param type:
        :type type: str
        :param var_from:
        :type var_from: int
        :param to:
        :type to: int
        :param realm_id:
        :type realm_id: str
        :param user_id:
        :type user_id: str
        :param asset_id:
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_notifications_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            id=id,
            type=type,
            var_from=var_from,
            to=to,
            realm_id=realm_id,
            user_id=user_id,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_notifications_serialize(
        self,
        authorization,
        x_forwarded_proto,
        x_forwarded_host,
        id,
        type,
        var_from,
        to,
        realm_id,
        user_id,
        asset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if realm_id is not None:
            
            _query_params.append(('realmId', realm_id))
            
        if user_id is not None:
            
            _query_params.append(('userId', user_id))
            
        if asset_id is not None:
            
            _query_params.append(('assetId', asset_id))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_forwarded_proto is not None:
            _header_params['X-Forwarded-Proto'] = x_forwarded_proto
        if x_forwarded_host is not None:
            _header_params['X-Forwarded-Host'] = x_forwarded_host
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'openid', 
            'openid'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/notification',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_notification(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        notification: Optional[Notification] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Send a notification to one or more targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param notification:
        :type notification: Notification
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_notification_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            notification=notification,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_notification_with_http_info(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        notification: Optional[Notification] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Send a notification to one or more targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param notification:
        :type notification: Notification
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_notification_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            notification=notification,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_notification_without_preload_content(
        self,
        authorization: Optional[StrictStr] = None,
        x_forwarded_proto: Optional[StrictStr] = None,
        x_forwarded_host: Optional[StrictStr] = None,
        notification: Optional[Notification] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send a notification to one or more targets


        :param authorization:
        :type authorization: str
        :param x_forwarded_proto:
        :type x_forwarded_proto: str
        :param x_forwarded_host:
        :type x_forwarded_host: str
        :param notification:
        :type notification: Notification
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_notification_serialize(
            authorization=authorization,
            x_forwarded_proto=x_forwarded_proto,
            x_forwarded_host=x_forwarded_host,
            notification=notification,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_notification_serialize(
        self,
        authorization,
        x_forwarded_proto,
        x_forwarded_host,
        notification,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_forwarded_proto is not None:
            _header_params['X-Forwarded-Proto'] = x_forwarded_proto
        if x_forwarded_host is not None:
            _header_params['X-Forwarded-Host'] = x_forwarded_host
        # process the form parameters
        # process the body parameter
        if notification is not None:
            _body_params = notification


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'openid', 
            'openid'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/notification/alert',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


