# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openremote_openapi_client.models.asset_object_attributes import AssetObjectAttributes
from typing import Optional, Set
from typing_extensions import Self

class AgentObjectObjectObject(BaseModel):
    """
    AgentObjectObjectObject
    """ # noqa: E501
    id: Optional[Annotated[str, Field(strict=True)]] = None
    version: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=1023)]
    access_public_read: Optional[StrictBool] = Field(default=None, alias="accessPublicRead")
    parent_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="parentId")
    realm: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    type: Optional[StrictStr] = None
    path: Optional[List[StrictStr]] = None
    attributes: Optional[AssetObjectAttributes] = None
    __properties: ClassVar[List[str]] = ["id", "version", "createdOn", "name", "accessPublicRead", "parentId", "realm", "type", "path", "attributes"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z]{22}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z]{22}$/")
        return value

    @field_validator('parent_id')
    def parent_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z]{22}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z]{22}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentObjectObjectObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentObjectObjectObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "createdOn": obj.get("createdOn"),
            "name": obj.get("name"),
            "accessPublicRead": obj.get("accessPublicRead"),
            "parentId": obj.get("parentId"),
            "realm": obj.get("realm"),
            "type": obj.get("type"),
            "path": obj.get("path"),
            "attributes": AssetObjectAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None
        })
        return _obj


