# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openremote_openapi_client.models.value_constraint import ValueConstraint
from openremote_openapi_client.models.value_format import ValueFormat
from typing import Optional, Set
from typing_extensions import Self

class ValueDescriptor(BaseModel):
    """
    ValueDescriptor
    """ # noqa: E501
    name: Optional[Annotated[str, Field(strict=True)]] = None
    constraints: Optional[List[ValueConstraint]] = None
    format: Optional[ValueFormat] = None
    units: Optional[List[StrictStr]] = None
    array_dimensions: Optional[StrictInt] = Field(default=None, alias="arrayDimensions")
    meta_use_only: Optional[StrictBool] = Field(default=None, alias="metaUseOnly")
    json_type: Optional[StrictStr] = Field(default=None, alias="jsonType")
    __properties: ClassVar[List[str]] = ["name", "constraints", "format", "units", "arrayDimensions", "metaUseOnly", "jsonType"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\w+(\[\])?$", value):
            raise ValueError(r"must validate the regular expression /^\w+(\[\])?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValueDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item_constraints in self.constraints:
                if _item_constraints:
                    _items.append(_item_constraints.to_dict())
            _dict['constraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValueDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "constraints": [ValueConstraint.from_dict(_item) for _item in obj["constraints"]] if obj.get("constraints") is not None else None,
            "format": ValueFormat.from_dict(obj["format"]) if obj.get("format") is not None else None,
            "units": obj.get("units"),
            "arrayDimensions": obj.get("arrayDimensions"),
            "metaUseOnly": obj.get("metaUseOnly"),
            "jsonType": obj.get("jsonType")
        })
        return _obj


