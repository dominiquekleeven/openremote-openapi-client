# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.node_internal import NodeInternal
from openremote_openapi_client.models.node_position import NodePosition
from openremote_openapi_client.models.node_socket import NodeSocket
from typing import Optional, Set
from typing_extensions import Self

class Node(BaseModel):
    """
    Node
    """ # noqa: E501
    id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    position: Optional[NodePosition] = None
    size: Optional[NodePosition] = None
    internals: Optional[List[NodeInternal]] = None
    inputs: Optional[List[NodeSocket]] = None
    outputs: Optional[List[NodeSocket]] = None
    display_character: Optional[StrictStr] = Field(default=None, alias="displayCharacter")
    __properties: ClassVar[List[str]] = ["id", "type", "priority", "name", "position", "size", "internals", "inputs", "outputs", "displayCharacter"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INPUT', 'PROCESSOR', 'OUTPUT', 'THEN']):
            raise ValueError("must be one of enum values ('INPUT', 'PROCESSOR', 'OUTPUT', 'THEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in internals (list)
        _items = []
        if self.internals:
            for _item_internals in self.internals:
                if _item_internals:
                    _items.append(_item_internals.to_dict())
            _dict['internals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "priority": obj.get("priority"),
            "name": obj.get("name"),
            "position": NodePosition.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "size": NodePosition.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "internals": [NodeInternal.from_dict(_item) for _item in obj["internals"]] if obj.get("internals") is not None else None,
            "inputs": [NodeSocket.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "outputs": [NodeSocket.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "displayCharacter": obj.get("displayCharacter")
        })
        return _obj


