# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openremote_openapi_client.models.gateway_asset_sync_rule import GatewayAssetSyncRule
from openremote_openapi_client.models.gateway_attribute_filter import GatewayAttributeFilter
from typing import Optional, Set
from typing_extensions import Self

class GatewayConnection(BaseModel):
    """
    GatewayConnection
    """ # noqa: E501
    local_realm: Optional[StrictStr] = Field(default=None, alias="localRealm")
    host: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    port: Optional[Annotated[int, Field(le=65536, strict=True, ge=1)]] = None
    realm: Optional[StrictStr] = None
    client_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(alias="clientId")
    client_secret: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(alias="clientSecret")
    secured: Optional[StrictBool] = None
    attribute_filters: Optional[List[GatewayAttributeFilter]] = Field(default=None, alias="attributeFilters")
    asset_sync_rules: Optional[Dict[str, GatewayAssetSyncRule]] = Field(default=None, alias="assetSyncRules")
    disabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["localRealm", "host", "port", "realm", "clientId", "clientSecret", "secured", "attributeFilters", "assetSyncRules", "disabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attribute_filters (list)
        _items = []
        if self.attribute_filters:
            for _item_attribute_filters in self.attribute_filters:
                if _item_attribute_filters:
                    _items.append(_item_attribute_filters.to_dict())
            _dict['attributeFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in asset_sync_rules (dict)
        _field_dict = {}
        if self.asset_sync_rules:
            for _key_asset_sync_rules in self.asset_sync_rules:
                if self.asset_sync_rules[_key_asset_sync_rules]:
                    _field_dict[_key_asset_sync_rules] = self.asset_sync_rules[_key_asset_sync_rules].to_dict()
            _dict['assetSyncRules'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "localRealm": obj.get("localRealm"),
            "host": obj.get("host"),
            "port": obj.get("port"),
            "realm": obj.get("realm"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "secured": obj.get("secured"),
            "attributeFilters": [GatewayAttributeFilter.from_dict(_item) for _item in obj["attributeFilters"]] if obj.get("attributeFilters") is not None else None,
            "assetSyncRules": dict(
                (_k, GatewayAssetSyncRule.from_dict(_v))
                for _k, _v in obj["assetSyncRules"].items()
            )
            if obj.get("assetSyncRules") is not None
            else None,
            "disabled": obj.get("disabled")
        })
        return _obj


