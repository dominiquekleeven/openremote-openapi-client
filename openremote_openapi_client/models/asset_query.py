# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.logic_group_attribute_predicate import LogicGroupAttributePredicate
from openremote_openapi_client.models.order_by import OrderBy
from openremote_openapi_client.models.parent_predicate import ParentPredicate
from openremote_openapi_client.models.path_predicate import PathPredicate
from openremote_openapi_client.models.realm_predicate import RealmPredicate
from openremote_openapi_client.models.select import Select
from openremote_openapi_client.models.string_predicate import StringPredicate
from typing import Optional, Set
from typing_extensions import Self

class AssetQuery(BaseModel):
    """
    AssetQuery
    """ # noqa: E501
    recursive: Optional[StrictBool] = None
    select: Optional[Select] = None
    access: Optional[StrictStr] = None
    ids: Optional[List[StrictStr]] = None
    names: Optional[List[StringPredicate]] = None
    parents: Optional[List[ParentPredicate]] = None
    paths: Optional[List[PathPredicate]] = None
    realm: Optional[RealmPredicate] = None
    user_ids: Optional[List[StrictStr]] = Field(default=None, alias="userIds")
    types: Optional[List[StrictStr]] = None
    attributes: Optional[LogicGroupAttributePredicate] = None
    order_by: Optional[OrderBy] = Field(default=None, alias="orderBy")
    limit: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["recursive", "select", "access", "ids", "names", "parents", "paths", "realm", "userIds", "types", "attributes", "orderBy", "limit"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIVATE', 'PROTECTED', 'PUBLIC']):
            raise ValueError("must be one of enum values ('PRIVATE', 'PROTECTED', 'PUBLIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of select
        if self.select:
            _dict['select'] = self.select.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in names (list)
        _items = []
        if self.names:
            for _item_names in self.names:
                if _item_names:
                    _items.append(_item_names.to_dict())
            _dict['names'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in paths (list)
        _items = []
        if self.paths:
            for _item_paths in self.paths:
                if _item_paths:
                    _items.append(_item_paths.to_dict())
            _dict['paths'] = _items
        # override the default output from pydantic by calling `to_dict()` of realm
        if self.realm:
            _dict['realm'] = self.realm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_by
        if self.order_by:
            _dict['orderBy'] = self.order_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recursive": obj.get("recursive"),
            "select": Select.from_dict(obj["select"]) if obj.get("select") is not None else None,
            "access": obj.get("access"),
            "ids": obj.get("ids"),
            "names": [StringPredicate.from_dict(_item) for _item in obj["names"]] if obj.get("names") is not None else None,
            "parents": [ParentPredicate.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "paths": [PathPredicate.from_dict(_item) for _item in obj["paths"]] if obj.get("paths") is not None else None,
            "realm": RealmPredicate.from_dict(obj["realm"]) if obj.get("realm") is not None else None,
            "userIds": obj.get("userIds"),
            "types": obj.get("types"),
            "attributes": LogicGroupAttributePredicate.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "orderBy": OrderBy.from_dict(obj["orderBy"]) if obj.get("orderBy") is not None else None,
            "limit": obj.get("limit")
        })
        return _obj


