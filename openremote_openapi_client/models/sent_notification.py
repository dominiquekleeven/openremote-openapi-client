# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.abstract_notification_message import AbstractNotificationMessage
from typing import Optional, Set
from typing_extensions import Self

class SentNotification(BaseModel):
    """
    SentNotification
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    type: StrictStr
    target: StrictStr
    target_id: StrictStr = Field(alias="targetId")
    source: StrictStr
    source_id: Optional[StrictStr] = Field(default=None, alias="sourceId")
    message: Optional[AbstractNotificationMessage] = None
    error: Optional[StrictStr] = None
    sent_on: Optional[datetime] = Field(default=None, alias="sentOn")
    delivered_on: Optional[datetime] = Field(default=None, alias="deliveredOn")
    acknowledged_on: Optional[datetime] = Field(default=None, alias="acknowledgedOn")
    acknowledgement: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "type", "target", "targetId", "source", "sourceId", "message", "error", "sentOn", "deliveredOn", "acknowledgedOn", "acknowledgement"]

    @field_validator('target')
    def target_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['REALM', 'USER', 'ASSET', 'CUSTOM']):
            raise ValueError("must be one of enum values ('REALM', 'USER', 'ASSET', 'CUSTOM')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INTERNAL', 'CLIENT', 'GLOBAL_RULESET', 'REALM_RULESET', 'ASSET_RULESET']):
            raise ValueError("must be one of enum values ('INTERNAL', 'CLIENT', 'GLOBAL_RULESET', 'REALM_RULESET', 'ASSET_RULESET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SentNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SentNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "target": obj.get("target"),
            "targetId": obj.get("targetId"),
            "source": obj.get("source"),
            "sourceId": obj.get("sourceId"),
            "message": AbstractNotificationMessage.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "error": obj.get("error"),
            "sentOn": obj.get("sentOn"),
            "deliveredOn": obj.get("deliveredOn"),
            "acknowledgedOn": obj.get("acknowledgedOn"),
            "acknowledgement": obj.get("acknowledgement")
        })
        return _obj


