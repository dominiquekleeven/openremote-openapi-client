# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.username_password import UsernamePassword
from typing import Optional, Set
from typing_extensions import Self

class ManagerConfig(BaseModel):
    """
    ManagerConfig
    """ # noqa: E501
    manager_url: Optional[StrictStr] = Field(default=None, alias="managerUrl")
    keycloak_url: Optional[StrictStr] = Field(default=None, alias="keycloakUrl")
    app_version: Optional[StrictStr] = Field(default=None, alias="appVersion")
    realm: Optional[StrictStr] = None
    client_id: Optional[StrictStr] = Field(default=None, alias="clientId")
    auto_login: Optional[StrictBool] = Field(default=None, alias="autoLogin")
    console_auto_enable: Optional[StrictBool] = Field(default=None, alias="consoleAutoEnable")
    load_icons: Optional[StrictBool] = Field(default=None, alias="loadIcons")
    polling_interval_millis: Optional[StrictInt] = Field(default=None, alias="pollingIntervalMillis")
    load_translations: Optional[List[StrictStr]] = Field(default=None, alias="loadTranslations")
    load_descriptors: Optional[StrictBool] = Field(default=None, alias="loadDescriptors")
    translations_load_path: Optional[StrictStr] = Field(default=None, alias="translationsLoadPath")
    skip_fallback_to_basic_auth: Optional[StrictBool] = Field(default=None, alias="skipFallbackToBasicAuth")
    apply_config_to_admin: Optional[StrictBool] = Field(default=None, alias="applyConfigToAdmin")
    auth: Optional[StrictStr] = None
    credentials: Optional[UsernamePassword] = None
    event_provider_type: Optional[StrictStr] = Field(default=None, alias="eventProviderType")
    map_type: Optional[StrictStr] = Field(default=None, alias="mapType")
    configure_translations_options: Optional[Dict[str, Any]] = Field(default=None, alias="configureTranslationsOptions")
    basic_login_provider: Optional[Dict[str, Any]] = Field(default=None, alias="basicLoginProvider")
    default_language: Optional[StrictStr] = Field(default=None, alias="defaultLanguage")
    __properties: ClassVar[List[str]] = ["managerUrl", "keycloakUrl", "appVersion", "realm", "clientId", "autoLogin", "consoleAutoEnable", "loadIcons", "pollingIntervalMillis", "loadTranslations", "loadDescriptors", "translationsLoadPath", "skipFallbackToBasicAuth", "applyConfigToAdmin", "auth", "credentials", "eventProviderType", "mapType", "configureTranslationsOptions", "basicLoginProvider", "defaultLanguage"]

    @field_validator('auth')
    def auth_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEYCLOAK', 'BASIC', 'NONE']):
            raise ValueError("must be one of enum values ('KEYCLOAK', 'BASIC', 'NONE')")
        return value

    @field_validator('event_provider_type')
    def event_provider_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEBSOCKET', 'POLLING']):
            raise ValueError("must be one of enum values ('WEBSOCKET', 'POLLING')")
        return value

    @field_validator('map_type')
    def map_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VECTOR', 'RASTER']):
            raise ValueError("must be one of enum values ('VECTOR', 'RASTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            _dict['credentials'] = self.credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "managerUrl": obj.get("managerUrl"),
            "keycloakUrl": obj.get("keycloakUrl"),
            "appVersion": obj.get("appVersion"),
            "realm": obj.get("realm"),
            "clientId": obj.get("clientId"),
            "autoLogin": obj.get("autoLogin"),
            "consoleAutoEnable": obj.get("consoleAutoEnable"),
            "loadIcons": obj.get("loadIcons"),
            "pollingIntervalMillis": obj.get("pollingIntervalMillis"),
            "loadTranslations": obj.get("loadTranslations"),
            "loadDescriptors": obj.get("loadDescriptors"),
            "translationsLoadPath": obj.get("translationsLoadPath"),
            "skipFallbackToBasicAuth": obj.get("skipFallbackToBasicAuth"),
            "applyConfigToAdmin": obj.get("applyConfigToAdmin"),
            "auth": obj.get("auth"),
            "credentials": UsernamePassword.from_dict(obj["credentials"]) if obj.get("credentials") is not None else None,
            "eventProviderType": obj.get("eventProviderType"),
            "mapType": obj.get("mapType"),
            "configureTranslationsOptions": obj.get("configureTranslationsOptions"),
            "basicLoginProvider": obj.get("basicLoginProvider"),
            "defaultLanguage": obj.get("defaultLanguage")
        })
        return _obj


