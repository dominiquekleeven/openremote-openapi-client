# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DashboardGridItem(BaseModel):
    """
    DashboardGridItem
    """ # noqa: E501
    id: Optional[StrictStr] = None
    x: Optional[StrictInt] = None
    y: Optional[StrictInt] = None
    w: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    h: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    min_h: Optional[StrictInt] = Field(default=None, alias="minH")
    min_w: Optional[StrictInt] = Field(default=None, alias="minW")
    min_pixel_h: Optional[StrictInt] = Field(default=None, alias="minPixelH")
    min_pixel_w: Optional[StrictInt] = Field(default=None, alias="minPixelW")
    no_resize: Optional[StrictBool] = Field(default=None, alias="noResize")
    no_move: Optional[StrictBool] = Field(default=None, alias="noMove")
    locked: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "x", "y", "w", "h", "minH", "minW", "minPixelH", "minPixelW", "noResize", "noMove", "locked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardGridItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardGridItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "x": obj.get("x"),
            "y": obj.get("y"),
            "w": obj.get("w"),
            "h": obj.get("h"),
            "minH": obj.get("minH"),
            "minW": obj.get("minW"),
            "minPixelH": obj.get("minPixelH"),
            "minPixelW": obj.get("minPixelW"),
            "noResize": obj.get("noResize"),
            "noMove": obj.get("noMove"),
            "locked": obj.get("locked")
        })
        return _obj


