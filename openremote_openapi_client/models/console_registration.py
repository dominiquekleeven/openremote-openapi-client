# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openremote_openapi_client.models.console_provider import ConsoleProvider
from typing import Optional, Set
from typing_extensions import Self

class ConsoleRegistration(BaseModel):
    """
    ConsoleRegistration
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True)]
    version: Annotated[str, Field(min_length=1, strict=True)]
    platform: Annotated[str, Field(min_length=1, strict=True)]
    providers: Dict[str, ConsoleProvider]
    model: Optional[StrictStr] = None
    apps: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "version", "platform", "providers", "model", "apps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsoleRegistration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in providers (dict)
        _field_dict = {}
        if self.providers:
            for _key_providers in self.providers:
                if self.providers[_key_providers]:
                    _field_dict[_key_providers] = self.providers[_key_providers].to_dict()
            _dict['providers'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsoleRegistration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "platform": obj.get("platform"),
            "providers": dict(
                (_k, ConsoleProvider.from_dict(_v))
                for _k, _v in obj["providers"].items()
            )
            if obj.get("providers") is not None
            else None,
            "model": obj.get("model"),
            "apps": obj.get("apps")
        })
        return _obj


