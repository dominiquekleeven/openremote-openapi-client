# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AssetRuleset(BaseModel):
    """
    AssetRuleset
    """ # noqa: E501
    id: Optional[StrictInt] = None
    version: Optional[StrictInt] = None
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    last_modified: Optional[datetime] = Field(default=None, alias="lastModified")
    name: Annotated[str, Field(min_length=3, strict=True, max_length=255)]
    enabled: Optional[StrictBool] = None
    rules: Optional[StrictStr] = None
    lang: StrictStr
    meta: Optional[Dict[str, Dict[str, Any]]] = None
    status: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    asset_id: Optional[StrictStr] = Field(default=None, alias="assetId")
    access_public_read: Optional[StrictBool] = Field(default=None, alias="accessPublicRead")
    realm: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "version", "createdOn", "lastModified", "name", "enabled", "rules", "lang", "meta", "status", "error", "assetId", "accessPublicRead", "realm"]

    @field_validator('lang')
    def lang_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['JAVASCRIPT', 'GROOVY', 'JSON', 'FLOW']):
            raise ValueError("must be one of enum values ('JAVASCRIPT', 'GROOVY', 'JSON', 'FLOW')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['READY', 'DEPLOYED', 'COMPILATION_ERROR', 'VALIDITY_PERIOD_ERROR', 'EXECUTION_ERROR', 'LOOP_ERROR', 'DISABLED', 'PAUSED', 'EXPIRED', 'REMOVED', 'EMPTY']):
            raise ValueError("must be one of enum values ('READY', 'DEPLOYED', 'COMPILATION_ERROR', 'VALIDITY_PERIOD_ERROR', 'EXECUTION_ERROR', 'LOOP_ERROR', 'DISABLED', 'PAUSED', 'EXPIRED', 'REMOVED', 'EMPTY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetRuleset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetRuleset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "createdOn": obj.get("createdOn"),
            "lastModified": obj.get("lastModified"),
            "name": obj.get("name"),
            "enabled": obj.get("enabled"),
            "rules": obj.get("rules"),
            "lang": obj.get("lang"),
            "meta": obj.get("meta"),
            "status": obj.get("status"),
            "error": obj.get("error"),
            "assetId": obj.get("assetId"),
            "accessPublicRead": obj.get("accessPublicRead"),
            "realm": obj.get("realm")
        })
        return _obj


