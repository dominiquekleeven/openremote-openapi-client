# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openremote_openapi_client.models.realm_role import RealmRole
from typing import Optional, Set
from typing_extensions import Self

class Realm(BaseModel):
    """
    Realm
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    enabled: Optional[StrictBool] = None
    not_before: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="notBefore")
    password_policy: Optional[List[StrictStr]] = Field(default=None, alias="passwordPolicy")
    reset_password_allowed: Optional[StrictBool] = Field(default=None, alias="resetPasswordAllowed")
    duplicate_emails_allowed: Optional[StrictBool] = Field(default=None, alias="duplicateEmailsAllowed")
    remember_me: Optional[StrictBool] = Field(default=None, alias="rememberMe")
    registration_allowed: Optional[StrictBool] = Field(default=None, alias="registrationAllowed")
    registration_email_as_username: Optional[StrictBool] = Field(default=None, alias="registrationEmailAsUsername")
    verify_email: Optional[StrictBool] = Field(default=None, alias="verifyEmail")
    login_with_email: Optional[StrictBool] = Field(default=None, alias="loginWithEmail")
    login_theme: Optional[StrictStr] = Field(default=None, alias="loginTheme")
    account_theme: Optional[StrictStr] = Field(default=None, alias="accountTheme")
    admin_theme: Optional[StrictStr] = Field(default=None, alias="adminTheme")
    email_theme: Optional[StrictStr] = Field(default=None, alias="emailTheme")
    access_token_lifespan: Optional[StrictInt] = Field(default=None, alias="accessTokenLifespan")
    realm_roles: Optional[List[RealmRole]] = Field(default=None, alias="realmRoles")
    __properties: ClassVar[List[str]] = ["id", "name", "displayName", "enabled", "notBefore", "passwordPolicy", "resetPasswordAllowed", "duplicateEmailsAllowed", "rememberMe", "registrationAllowed", "registrationEmailAsUsername", "verifyEmail", "loginWithEmail", "loginTheme", "accountTheme", "adminTheme", "emailTheme", "accessTokenLifespan", "realmRoles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Realm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in realm_roles (list)
        _items = []
        if self.realm_roles:
            for _item_realm_roles in self.realm_roles:
                if _item_realm_roles:
                    _items.append(_item_realm_roles.to_dict())
            _dict['realmRoles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Realm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "notBefore": obj.get("notBefore"),
            "passwordPolicy": obj.get("passwordPolicy"),
            "resetPasswordAllowed": obj.get("resetPasswordAllowed"),
            "duplicateEmailsAllowed": obj.get("duplicateEmailsAllowed"),
            "rememberMe": obj.get("rememberMe"),
            "registrationAllowed": obj.get("registrationAllowed"),
            "registrationEmailAsUsername": obj.get("registrationEmailAsUsername"),
            "verifyEmail": obj.get("verifyEmail"),
            "loginWithEmail": obj.get("loginWithEmail"),
            "loginTheme": obj.get("loginTheme"),
            "accountTheme": obj.get("accountTheme"),
            "adminTheme": obj.get("adminTheme"),
            "emailTheme": obj.get("emailTheme"),
            "accessTokenLifespan": obj.get("accessTokenLifespan"),
            "realmRoles": [RealmRole.from_dict(_item) for _item in obj["realmRoles"]] if obj.get("realmRoles") is not None else None
        })
        return _obj


