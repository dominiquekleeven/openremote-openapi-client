# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.name_value_predicate import NameValuePredicate
from openremote_openapi_client.models.string_predicate import StringPredicate
from openremote_openapi_client.models.value_predicate import ValuePredicate
from typing import Optional, Set
from typing_extensions import Self

class AttributePredicate(BaseModel):
    """
    AttributePredicate
    """ # noqa: E501
    name: Optional[StringPredicate] = None
    negated: Optional[StrictBool] = None
    path: Optional[List[Dict[str, Any]]] = None
    value: Optional[ValuePredicate] = None
    meta: Optional[List[NameValuePredicate]] = None
    previous_value: Optional[ValuePredicate] = Field(default=None, alias="previousValue")
    timestamp_older_than: Optional[StrictStr] = Field(default=None, alias="timestampOlderThan")
    __properties: ClassVar[List[str]] = ["name", "negated", "path", "value", "meta", "previousValue", "timestampOlderThan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributePredicate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in meta (list)
        _items = []
        if self.meta:
            for _item_meta in self.meta:
                if _item_meta:
                    _items.append(_item_meta.to_dict())
            _dict['meta'] = _items
        # override the default output from pydantic by calling `to_dict()` of previous_value
        if self.previous_value:
            _dict['previousValue'] = self.previous_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributePredicate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": StringPredicate.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "negated": obj.get("negated"),
            "path": obj.get("path"),
            "value": ValuePredicate.from_dict(obj["value"]) if obj.get("value") is not None else None,
            "meta": [NameValuePredicate.from_dict(_item) for _item in obj["meta"]] if obj.get("meta") is not None else None,
            "previousValue": ValuePredicate.from_dict(obj["previousValue"]) if obj.get("previousValue") is not None else None,
            "timestampOlderThan": obj.get("timestampOlderThan")
        })
        return _obj


