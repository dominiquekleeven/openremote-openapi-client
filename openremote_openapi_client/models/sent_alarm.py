# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.asset_object import AssetObject
from typing import Optional, Set
from typing_extensions import Self

class SentAlarm(BaseModel):
    """
    SentAlarm
    """ # noqa: E501
    id: Optional[StrictInt] = None
    realm: StrictStr
    title: Optional[StrictStr] = None
    content: Optional[StrictStr] = None
    severity: StrictStr
    status: StrictStr
    source: StrictStr
    source_id: Optional[StrictStr] = Field(default=None, alias="sourceId")
    source_username: Optional[StrictStr] = Field(default=None, alias="sourceUsername")
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    acknowledged_on: Optional[datetime] = Field(default=None, alias="acknowledgedOn")
    last_modified: Optional[datetime] = Field(default=None, alias="lastModified")
    assignee_id: Optional[StrictStr] = Field(default=None, alias="assigneeId")
    assignee_username: Optional[StrictStr] = Field(default=None, alias="assigneeUsername")
    asset: Optional[List[AssetObject]] = None
    __properties: ClassVar[List[str]] = ["id", "realm", "title", "content", "severity", "status", "source", "sourceId", "sourceUsername", "createdOn", "acknowledgedOn", "lastModified", "assigneeId", "assigneeUsername", "asset"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('LOW', 'MEDIUM', 'HIGH')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OPEN', 'ACKNOWLEDGED', 'IN_PROGRESS', 'RESOLVED', 'CLOSED']):
            raise ValueError("must be one of enum values ('OPEN', 'ACKNOWLEDGED', 'IN_PROGRESS', 'RESOLVED', 'CLOSED')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MANUAL', 'CLIENT', 'GLOBAL_RULESET', 'REALM_RULESET', 'ASSET_RULESET', 'AGENT']):
            raise ValueError("must be one of enum values ('MANUAL', 'CLIENT', 'GLOBAL_RULESET', 'REALM_RULESET', 'ASSET_RULESET', 'AGENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SentAlarm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in asset (list)
        _items = []
        if self.asset:
            for _item_asset in self.asset:
                if _item_asset:
                    _items.append(_item_asset.to_dict())
            _dict['asset'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SentAlarm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "realm": obj.get("realm"),
            "title": obj.get("title"),
            "content": obj.get("content"),
            "severity": obj.get("severity"),
            "status": obj.get("status"),
            "source": obj.get("source"),
            "sourceId": obj.get("sourceId"),
            "sourceUsername": obj.get("sourceUsername"),
            "createdOn": obj.get("createdOn"),
            "acknowledgedOn": obj.get("acknowledgedOn"),
            "lastModified": obj.get("lastModified"),
            "assigneeId": obj.get("assigneeId"),
            "assigneeUsername": obj.get("assigneeUsername"),
            "asset": [AssetObject.from_dict(_item) for _item in obj["asset"]] if obj.get("asset") is not None else None
        })
        return _obj


