# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openremote_openapi_client.models.array_predicate import ArrayPredicate
    from openremote_openapi_client.models.boolean_predicate import BooleanPredicate
    from openremote_openapi_client.models.calendar_event_predicate import CalendarEventPredicate
    from openremote_openapi_client.models.date_time_predicate import DateTimePredicate
    from openremote_openapi_client.models.number_predicate import NumberPredicate
    from openremote_openapi_client.models.radial_geofence_predicate import RadialGeofencePredicate
    from openremote_openapi_client.models.rectangular_geofence_predicate import RectangularGeofencePredicate
    from openremote_openapi_client.models.value_any_predicate import ValueAnyPredicate
    from openremote_openapi_client.models.value_empty_predicate import ValueEmptyPredicate

class ValuePredicate(BaseModel):
    """
    ValuePredicate
    """ # noqa: E501
    predicate_type: StrictStr = Field(alias="predicateType")
    __properties: ClassVar[List[str]] = ["predicateType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'predicateType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayPredicate': 'ArrayPredicate','BooleanPredicate': 'BooleanPredicate','CalendarEventPredicate': 'CalendarEventPredicate','DateTimePredicate': 'DateTimePredicate','NumberPredicate': 'NumberPredicate','RadialGeofencePredicate': 'RadialGeofencePredicate','RectangularGeofencePredicate': 'RectangularGeofencePredicate','ValueAnyPredicate': 'ValueAnyPredicate','ValueEmptyPredicate': 'ValueEmptyPredicate'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ArrayPredicate, BooleanPredicate, CalendarEventPredicate, DateTimePredicate, NumberPredicate, RadialGeofencePredicate, RectangularGeofencePredicate, ValueAnyPredicate, ValueEmptyPredicate]]:
        """Create an instance of ValuePredicate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ArrayPredicate, BooleanPredicate, CalendarEventPredicate, DateTimePredicate, NumberPredicate, RadialGeofencePredicate, RectangularGeofencePredicate, ValueAnyPredicate, ValueEmptyPredicate]]:
        """Create an instance of ValuePredicate from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ArrayPredicate':
            return import_module("openremote_openapi_client.models.array_predicate").ArrayPredicate.from_dict(obj)
        if object_type ==  'BooleanPredicate':
            return import_module("openremote_openapi_client.models.boolean_predicate").BooleanPredicate.from_dict(obj)
        if object_type ==  'CalendarEventPredicate':
            return import_module("openremote_openapi_client.models.calendar_event_predicate").CalendarEventPredicate.from_dict(obj)
        if object_type ==  'DateTimePredicate':
            return import_module("openremote_openapi_client.models.date_time_predicate").DateTimePredicate.from_dict(obj)
        if object_type ==  'NumberPredicate':
            return import_module("openremote_openapi_client.models.number_predicate").NumberPredicate.from_dict(obj)
        if object_type ==  'RadialGeofencePredicate':
            return import_module("openremote_openapi_client.models.radial_geofence_predicate").RadialGeofencePredicate.from_dict(obj)
        if object_type ==  'RectangularGeofencePredicate':
            return import_module("openremote_openapi_client.models.rectangular_geofence_predicate").RectangularGeofencePredicate.from_dict(obj)
        if object_type ==  'ValueAnyPredicate':
            return import_module("openremote_openapi_client.models.value_any_predicate").ValueAnyPredicate.from_dict(obj)
        if object_type ==  'ValueEmptyPredicate':
            return import_module("openremote_openapi_client.models.value_empty_predicate").ValueEmptyPredicate.from_dict(obj)

        raise ValueError("ValuePredicate failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


