# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openremote_openapi_client.models.conditions import Conditions
from openremote_openapi_client.models.realm_predicate import RealmPredicate
from openremote_openapi_client.models.select import Select
from openremote_openapi_client.models.string_predicate import StringPredicate
from typing import Optional, Set
from typing_extensions import Self

class DashboardQuery(BaseModel):
    """
    DashboardQuery
    """ # noqa: E501
    select: Optional[Select] = None
    conditions: Optional[Conditions] = None
    ids: Optional[List[StrictStr]] = None
    names: Optional[List[StringPredicate]] = None
    user_ids: Optional[List[StrictStr]] = Field(default=None, alias="userIds")
    realm: Optional[RealmPredicate] = None
    start: Optional[StrictInt] = None
    limit: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["select", "conditions", "ids", "names", "userIds", "realm", "start", "limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of select
        if self.select:
            _dict['select'] = self.select.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in names (list)
        _items = []
        if self.names:
            for _item_names in self.names:
                if _item_names:
                    _items.append(_item_names.to_dict())
            _dict['names'] = _items
        # override the default output from pydantic by calling `to_dict()` of realm
        if self.realm:
            _dict['realm'] = self.realm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "select": Select.from_dict(obj["select"]) if obj.get("select") is not None else None,
            "conditions": Conditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "ids": obj.get("ids"),
            "names": [StringPredicate.from_dict(_item) for _item in obj["names"]] if obj.get("names") is not None else None,
            "userIds": obj.get("userIds"),
            "realm": RealmPredicate.from_dict(obj["realm"]) if obj.get("realm") is not None else None,
            "start": obj.get("start"),
            "limit": obj.get("limit")
        })
        return _obj


