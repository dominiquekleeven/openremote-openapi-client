# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from or_rest_client.models.dashboard_screen_preset import DashboardScreenPreset
from or_rest_client.models.dashboard_widget import DashboardWidget
from typing import Optional, Set
from typing_extensions import Self

class DashboardTemplate(BaseModel):
    """
    DashboardTemplate
    """ # noqa: E501
    id: Optional[StrictStr] = None
    columns: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    max_screen_width: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="maxScreenWidth")
    refresh_interval: Optional[StrictStr] = Field(default=None, alias="refreshInterval")
    screen_presets: List[DashboardScreenPreset] = Field(alias="screenPresets")
    widgets: Optional[List[DashboardWidget]] = None
    __properties: ClassVar[List[str]] = ["id", "columns", "maxScreenWidth", "refreshInterval", "screenPresets", "widgets"]

    @field_validator('refresh_interval')
    def refresh_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OFF', 'ONE_MIN', 'FIVE_MIN', 'QUARTER', 'ONE_HOUR']):
            raise ValueError("must be one of enum values ('OFF', 'ONE_MIN', 'FIVE_MIN', 'QUARTER', 'ONE_HOUR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in screen_presets (list)
        _items = []
        if self.screen_presets:
            for _item_screen_presets in self.screen_presets:
                if _item_screen_presets:
                    _items.append(_item_screen_presets.to_dict())
            _dict['screenPresets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in widgets (list)
        _items = []
        if self.widgets:
            for _item_widgets in self.widgets:
                if _item_widgets:
                    _items.append(_item_widgets.to_dict())
            _dict['widgets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "columns": obj.get("columns"),
            "maxScreenWidth": obj.get("maxScreenWidth"),
            "refreshInterval": obj.get("refreshInterval"),
            "screenPresets": [DashboardScreenPreset.from_dict(_item) for _item in obj["screenPresets"]] if obj.get("screenPresets") is not None else None,
            "widgets": [DashboardWidget.from_dict(_item) for _item in obj["widgets"]] if obj.get("widgets") is not None else None
        })
        return _obj


