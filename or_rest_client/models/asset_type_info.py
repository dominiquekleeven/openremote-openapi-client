# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from or_rest_client.models.asset_descriptor_object import AssetDescriptorObject
from or_rest_client.models.attribute_descriptor_object import AttributeDescriptorObject
from or_rest_client.models.meta_item_descriptor_object import MetaItemDescriptorObject
from or_rest_client.models.value_descriptor_object import ValueDescriptorObject
from typing import Optional, Set
from typing_extensions import Self

class AssetTypeInfo(BaseModel):
    """
    AssetTypeInfo
    """ # noqa: E501
    asset_descriptor: Optional[AssetDescriptorObject] = Field(default=None, alias="assetDescriptor")
    attribute_descriptors: Optional[List[AttributeDescriptorObject]] = Field(default=None, alias="attributeDescriptors")
    meta_item_descriptors: Optional[List[MetaItemDescriptorObject]] = Field(default=None, alias="metaItemDescriptors")
    value_descriptors: Optional[List[ValueDescriptorObject]] = Field(default=None, alias="valueDescriptors")
    __properties: ClassVar[List[str]] = ["assetDescriptor", "attributeDescriptors", "metaItemDescriptors", "valueDescriptors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetTypeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_descriptor
        if self.asset_descriptor:
            _dict['assetDescriptor'] = self.asset_descriptor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attribute_descriptors (list)
        _items = []
        if self.attribute_descriptors:
            for _item_attribute_descriptors in self.attribute_descriptors:
                if _item_attribute_descriptors:
                    _items.append(_item_attribute_descriptors.to_dict())
            _dict['attributeDescriptors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in meta_item_descriptors (list)
        _items = []
        if self.meta_item_descriptors:
            for _item_meta_item_descriptors in self.meta_item_descriptors:
                if _item_meta_item_descriptors:
                    _items.append(_item_meta_item_descriptors.to_dict())
            _dict['metaItemDescriptors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_descriptors (list)
        _items = []
        if self.value_descriptors:
            for _item_value_descriptors in self.value_descriptors:
                if _item_value_descriptors:
                    _items.append(_item_value_descriptors.to_dict())
            _dict['valueDescriptors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetTypeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetDescriptor": AssetDescriptorObject.from_dict(obj["assetDescriptor"]) if obj.get("assetDescriptor") is not None else None,
            "attributeDescriptors": [AttributeDescriptorObject.from_dict(_item) for _item in obj["attributeDescriptors"]] if obj.get("attributeDescriptors") is not None else None,
            "metaItemDescriptors": [MetaItemDescriptorObject.from_dict(_item) for _item in obj["metaItemDescriptors"]] if obj.get("metaItemDescriptors") is not None else None,
            "valueDescriptors": [ValueDescriptorObject.from_dict(_item) for _item in obj["valueDescriptors"]] if obj.get("valueDescriptors") is not None else None
        })
        return _obj


