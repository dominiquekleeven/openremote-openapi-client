# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from or_rest_client.models.x509_provisioning_config import X509ProvisioningConfig

class ProvisioningConfigObjectObject(BaseModel):
    """
    ProvisioningConfigObjectObject
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    last_modified: Optional[datetime] = Field(default=None, alias="lastModified")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    type: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=100)]] = None
    realm: Optional[StrictStr] = None
    asset_template: Optional[StrictStr] = Field(default=None, alias="assetTemplate")
    restricted_user: Optional[StrictBool] = Field(default=None, alias="restrictedUser")
    user_roles: Optional[List[StrictStr]] = Field(default=None, alias="userRoles")
    disabled: Optional[StrictBool] = None
    data: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "createdOn", "lastModified", "name", "type", "realm", "assetTemplate", "restrictedUser", "userRoles", "disabled", "data"]

    @field_validator('user_roles')
    def user_roles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['read:admin', 'read:logs', 'read:users', 'read:map', 'read:assets', 'read:rules', 'read:insights', 'read:alarms', 'read:services', 'write:services', 'write:user', 'write:admin', 'write:logs', 'write:assets', 'write:attributes', 'write:rules', 'write:insights', 'write:alarms', 'read', 'write']):
                raise ValueError("each list item must be one of ('read:admin', 'read:logs', 'read:users', 'read:map', 'read:assets', 'read:rules', 'read:insights', 'read:alarms', 'read:services', 'write:services', 'write:user', 'write:admin', 'write:logs', 'write:assets', 'write:attributes', 'write:rules', 'write:insights', 'write:alarms', 'read', 'write')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'X509ProvisioningConfig': 'X509ProvisioningConfig'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[X509ProvisioningConfig]]:
        """Create an instance of ProvisioningConfigObjectObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[X509ProvisioningConfig]]:
        """Create an instance of ProvisioningConfigObjectObject from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'X509ProvisioningConfig':
            return import_module("or_rest_client.models.x509_provisioning_config").X509ProvisioningConfig.from_dict(obj)

        raise ValueError("ProvisioningConfigObjectObject failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


