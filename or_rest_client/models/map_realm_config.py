# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from or_rest_client.models.geo_json_config import GeoJsonConfig
from typing import Optional, Set
from typing_extensions import Self

class MapRealmConfig(BaseModel):
    """
    MapRealmConfig
    """ # noqa: E501
    center: Optional[List[Union[StrictFloat, StrictInt]]] = None
    bounds: Optional[List[Union[StrictFloat, StrictInt]]] = None
    zoom: Optional[StrictInt] = None
    min_zoom: Optional[StrictInt] = Field(default=None, alias="minZoom")
    max_zoom: Optional[StrictInt] = Field(default=None, alias="maxZoom")
    box_zoom: Optional[StrictBool] = Field(default=None, alias="boxZoom")
    geocode_url: Optional[StrictStr] = Field(default=None, alias="geocodeUrl")
    geo_json: Optional[GeoJsonConfig] = Field(default=None, alias="geoJson")
    __properties: ClassVar[List[str]] = ["center", "bounds", "zoom", "minZoom", "maxZoom", "boxZoom", "geocodeUrl", "geoJson"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MapRealmConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geo_json
        if self.geo_json:
            _dict['geoJson'] = self.geo_json.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MapRealmConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "center": obj.get("center"),
            "bounds": obj.get("bounds"),
            "zoom": obj.get("zoom"),
            "minZoom": obj.get("minZoom"),
            "maxZoom": obj.get("maxZoom"),
            "boxZoom": obj.get("boxZoom"),
            "geocodeUrl": obj.get("geocodeUrl"),
            "geoJson": GeoJsonConfig.from_dict(obj["geoJson"]) if obj.get("geoJson") is not None else None
        })
        return _obj


