# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from or_rest_client.models.abstract_notification_message import AbstractNotificationMessage
from or_rest_client.models.recipient import Recipient
from typing import Optional, Set
from typing_extensions import Self

class EmailNotificationMessage(AbstractNotificationMessage):
    """
    EmailNotificationMessage
    """ # noqa: E501
    var_from: Optional[Recipient] = Field(default=None, alias="from")
    reply_to: Optional[Recipient] = Field(default=None, alias="replyTo")
    subject: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    html: Optional[StrictStr] = None
    to: Optional[List[Recipient]] = None
    cc: Optional[List[Recipient]] = None
    bcc: Optional[List[Recipient]] = None
    __properties: ClassVar[List[str]] = ["type", "from", "replyTo", "subject", "text", "html", "to", "cc", "bcc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailNotificationMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_to
        if self.reply_to:
            _dict['replyTo'] = self.reply_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in to (list)
        _items = []
        if self.to:
            for _item_to in self.to:
                if _item_to:
                    _items.append(_item_to.to_dict())
            _dict['to'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cc (list)
        _items = []
        if self.cc:
            for _item_cc in self.cc:
                if _item_cc:
                    _items.append(_item_cc.to_dict())
            _dict['cc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bcc (list)
        _items = []
        if self.bcc:
            for _item_bcc in self.bcc:
                if _item_bcc:
                    _items.append(_item_bcc.to_dict())
            _dict['bcc'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailNotificationMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "from": Recipient.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "replyTo": Recipient.from_dict(obj["replyTo"]) if obj.get("replyTo") is not None else None,
            "subject": obj.get("subject"),
            "text": obj.get("text"),
            "html": obj.get("html"),
            "to": [Recipient.from_dict(_item) for _item in obj["to"]] if obj.get("to") is not None else None,
            "cc": [Recipient.from_dict(_item) for _item in obj["cc"]] if obj.get("cc") is not None else None,
            "bcc": [Recipient.from_dict(_item) for _item in obj["bcc"]] if obj.get("bcc") is not None else None
        })
        return _obj


