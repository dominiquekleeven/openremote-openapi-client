# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from or_rest_client.models.abstract_notification_message import AbstractNotificationMessage
from or_rest_client.models.push_notification_action import PushNotificationAction
from or_rest_client.models.push_notification_button import PushNotificationButton
from typing import Optional, Set
from typing_extensions import Self

class PushNotificationMessage(AbstractNotificationMessage):
    """
    PushNotificationMessage
    """ # noqa: E501
    title: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    action: Optional[PushNotificationAction] = None
    buttons: Optional[List[PushNotificationButton]] = None
    data: Optional[Dict[str, Dict[str, Any]]] = None
    priority: Optional[StrictStr] = None
    target_type: Optional[StrictStr] = Field(default=None, alias="targetType")
    target: Optional[StrictStr] = None
    expiration: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["type", "title", "body", "action", "buttons", "data", "priority", "targetType", "target", "expiration"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'HIGH']):
            raise ValueError("must be one of enum values ('NORMAL', 'HIGH')")
        return value

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE', 'TOPIC', 'CONDITION']):
            raise ValueError("must be one of enum values ('DEVICE', 'TOPIC', 'CONDITION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PushNotificationMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in buttons (list)
        _items = []
        if self.buttons:
            for _item_buttons in self.buttons:
                if _item_buttons:
                    _items.append(_item_buttons.to_dict())
            _dict['buttons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PushNotificationMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "body": obj.get("body"),
            "action": PushNotificationAction.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "buttons": [PushNotificationButton.from_dict(_item) for _item in obj["buttons"]] if obj.get("buttons") is not None else None,
            "data": obj.get("data"),
            "priority": obj.get("priority"),
            "targetType": obj.get("targetType"),
            "target": obj.get("target"),
            "expiration": obj.get("expiration")
        })
        return _obj


