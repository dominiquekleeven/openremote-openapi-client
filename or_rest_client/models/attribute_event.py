# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from or_rest_client.models.attribute_ref import AttributeRef
from or_rest_client.models.attribute_state import AttributeState
from or_rest_client.models.value_descriptor import ValueDescriptor
from typing import Optional, Set
from typing_extensions import Self

class AttributeEvent(BaseModel):
    """
    AttributeEvent
    """ # noqa: E501
    attribute_state: Optional[AttributeState] = Field(default=None, alias="attributeState")
    ref: Optional[AttributeRef] = None
    value: Optional[Dict[str, Any]] = None
    timestamp: Optional[StrictInt] = None
    message_id: Optional[StrictStr] = Field(default=None, alias="messageID")
    deleted: Optional[StrictBool] = None
    realm: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    old_value: Optional[Dict[str, Any]] = Field(default=None, alias="oldValue")
    old_value_timestamp: Optional[StrictInt] = Field(default=None, alias="oldValueTimestamp")
    path: Optional[List[StrictStr]] = None
    asset_name: Optional[StrictStr] = Field(default=None, alias="assetName")
    asset_type: Optional[StrictStr] = Field(default=None, alias="assetType")
    created_on: Optional[datetime] = Field(default=None, alias="createdOn")
    type: Optional[ValueDescriptor] = None
    __properties: ClassVar[List[str]] = ["attributeState", "ref", "value", "timestamp", "messageID", "deleted", "realm", "parentId", "oldValue", "oldValueTimestamp", "path", "assetName", "assetType", "createdOn", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribute_state
        if self.attribute_state:
            _dict['attributeState'] = self.attribute_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ref
        if self.ref:
            _dict['ref'] = self.ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeState": AttributeState.from_dict(obj["attributeState"]) if obj.get("attributeState") is not None else None,
            "ref": AttributeRef.from_dict(obj["ref"]) if obj.get("ref") is not None else None,
            "value": obj.get("value"),
            "timestamp": obj.get("timestamp"),
            "messageID": obj.get("messageID"),
            "deleted": obj.get("deleted"),
            "realm": obj.get("realm"),
            "parentId": obj.get("parentId"),
            "oldValue": obj.get("oldValue"),
            "oldValueTimestamp": obj.get("oldValueTimestamp"),
            "path": obj.get("path"),
            "assetName": obj.get("assetName"),
            "assetType": obj.get("assetType"),
            "createdOn": obj.get("createdOn"),
            "type": ValueDescriptor.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj


