# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ValueFormat(BaseModel):
    """
    ValueFormat
    """ # noqa: E501
    use_grouping: Optional[StrictBool] = Field(default=None, alias="useGrouping")
    minimum_integer_digits: Optional[StrictInt] = Field(default=None, alias="minimumIntegerDigits")
    minimum_fraction_digits: Optional[StrictInt] = Field(default=None, alias="minimumFractionDigits")
    maximum_fraction_digits: Optional[StrictInt] = Field(default=None, alias="maximumFractionDigits")
    minimum_significant_digits: Optional[StrictInt] = Field(default=None, alias="minimumSignificantDigits")
    maximum_significant_digits: Optional[StrictInt] = Field(default=None, alias="maximumSignificantDigits")
    as_boolean: Optional[StrictBool] = Field(default=None, alias="asBoolean")
    as_date: Optional[StrictBool] = Field(default=None, alias="asDate")
    as_slider: Optional[StrictBool] = Field(default=None, alias="asSlider")
    resolution: Optional[Union[StrictFloat, StrictInt]] = None
    date_style: Optional[StrictStr] = Field(default=None, alias="dateStyle")
    time_style: Optional[StrictStr] = Field(default=None, alias="timeStyle")
    day_period: Optional[StrictStr] = Field(default=None, alias="dayPeriod")
    hour12: Optional[StrictBool] = None
    iso8601: Optional[StrictBool] = None
    weekday: Optional[StrictStr] = None
    era: Optional[StrictStr] = None
    year: Optional[StrictStr] = None
    month: Optional[StrictStr] = None
    week: Optional[StrictStr] = None
    day: Optional[StrictStr] = None
    hour: Optional[StrictStr] = None
    minute: Optional[StrictStr] = None
    second: Optional[StrictStr] = None
    fractional_second_digits: Optional[StrictInt] = Field(default=None, alias="fractionalSecondDigits")
    time_zone_name: Optional[StrictStr] = Field(default=None, alias="timeZoneName")
    moment_js_format: Optional[StrictStr] = Field(default=None, alias="momentJsFormat")
    as_number: Optional[StrictBool] = Field(default=None, alias="asNumber")
    as_on_off: Optional[StrictBool] = Field(default=None, alias="asOnOff")
    as_pressed_released: Optional[StrictBool] = Field(default=None, alias="asPressedReleased")
    as_open_closed: Optional[StrictBool] = Field(default=None, alias="asOpenClosed")
    as_momentary: Optional[StrictBool] = Field(default=None, alias="asMomentary")
    multiline: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["useGrouping", "minimumIntegerDigits", "minimumFractionDigits", "maximumFractionDigits", "minimumSignificantDigits", "maximumSignificantDigits", "asBoolean", "asDate", "asSlider", "resolution", "dateStyle", "timeStyle", "dayPeriod", "hour12", "iso8601", "weekday", "era", "year", "month", "week", "day", "hour", "minute", "second", "fractionalSecondDigits", "timeZoneName", "momentJsFormat", "asNumber", "asOnOff", "asPressedReleased", "asOpenClosed", "asMomentary", "multiline"]

    @field_validator('date_style')
    def date_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('time_style')
    def time_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('day_period')
    def day_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('weekday')
    def weekday_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('era')
    def era_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('year')
    def year_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('month')
    def month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('week')
    def week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('day')
    def day_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('hour')
    def hour_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('minute')
    def minute_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('second')
    def second_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    @field_validator('time_zone_name')
    def time_zone_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow']):
            raise ValueError("must be one of enum values ('numeric', '2-digit', 'full', 'long', 'medium', 'short', 'narrow')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValueFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValueFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "useGrouping": obj.get("useGrouping"),
            "minimumIntegerDigits": obj.get("minimumIntegerDigits"),
            "minimumFractionDigits": obj.get("minimumFractionDigits"),
            "maximumFractionDigits": obj.get("maximumFractionDigits"),
            "minimumSignificantDigits": obj.get("minimumSignificantDigits"),
            "maximumSignificantDigits": obj.get("maximumSignificantDigits"),
            "asBoolean": obj.get("asBoolean"),
            "asDate": obj.get("asDate"),
            "asSlider": obj.get("asSlider"),
            "resolution": obj.get("resolution"),
            "dateStyle": obj.get("dateStyle"),
            "timeStyle": obj.get("timeStyle"),
            "dayPeriod": obj.get("dayPeriod"),
            "hour12": obj.get("hour12"),
            "iso8601": obj.get("iso8601"),
            "weekday": obj.get("weekday"),
            "era": obj.get("era"),
            "year": obj.get("year"),
            "month": obj.get("month"),
            "week": obj.get("week"),
            "day": obj.get("day"),
            "hour": obj.get("hour"),
            "minute": obj.get("minute"),
            "second": obj.get("second"),
            "fractionalSecondDigits": obj.get("fractionalSecondDigits"),
            "timeZoneName": obj.get("timeZoneName"),
            "momentJsFormat": obj.get("momentJsFormat"),
            "asNumber": obj.get("asNumber"),
            "asOnOff": obj.get("asOnOff"),
            "asPressedReleased": obj.get("asPressedReleased"),
            "asOpenClosed": obj.get("asOpenClosed"),
            "asMomentary": obj.get("asMomentary"),
            "multiline": obj.get("multiline")
        })
        return _obj


