# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from or_rest_client.models.asset_query import AssetQuery
from typing import Optional, Set
from typing_extensions import Self

class GatewayAttributeFilter(BaseModel):
    """
    GatewayAttributeFilter
    """ # noqa: E501
    matcher: Optional[AssetQuery] = None
    duration: Optional[StrictStr] = None
    delta: Optional[Union[StrictFloat, StrictInt]] = None
    value_change: Optional[StrictBool] = Field(default=None, alias="valueChange")
    skip_always: Optional[StrictBool] = Field(default=None, alias="skipAlways")
    duration_parsed_millis: Optional[StrictInt] = Field(default=None, alias="durationParsedMillis")
    __properties: ClassVar[List[str]] = ["matcher", "duration", "delta", "valueChange", "skipAlways", "durationParsedMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayAttributeFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of matcher
        if self.matcher:
            _dict['matcher'] = self.matcher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayAttributeFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matcher": AssetQuery.from_dict(obj["matcher"]) if obj.get("matcher") is not None else None,
            "duration": obj.get("duration"),
            "delta": obj.get("delta"),
            "valueChange": obj.get("valueChange"),
            "skipAlways": obj.get("skipAlways"),
            "durationParsedMillis": obj.get("durationParsedMillis")
        })
        return _obj


