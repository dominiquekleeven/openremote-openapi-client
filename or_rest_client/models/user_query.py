# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from or_rest_client.models.attribute_value_predicate import AttributeValuePredicate
from or_rest_client.models.order_by import OrderBy
from or_rest_client.models.path_predicate import PathPredicate
from or_rest_client.models.realm_predicate import RealmPredicate
from or_rest_client.models.select import Select
from or_rest_client.models.string_predicate import StringPredicate
from typing import Optional, Set
from typing_extensions import Self

class UserQuery(BaseModel):
    """
    UserQuery
    """ # noqa: E501
    realm_predicate: Optional[RealmPredicate] = Field(default=None, alias="realmPredicate")
    assets: Optional[List[StrictStr]] = None
    path_predicate: Optional[PathPredicate] = Field(default=None, alias="pathPredicate")
    ids: Optional[List[StrictStr]] = None
    select: Optional[Select] = None
    usernames: Optional[List[StringPredicate]] = None
    attributes: Optional[List[AttributeValuePredicate]] = None
    client_roles: Optional[List[StringPredicate]] = Field(default=None, alias="clientRoles")
    realm_roles: Optional[List[StringPredicate]] = Field(default=None, alias="realmRoles")
    service_users: Optional[StrictBool] = Field(default=None, alias="serviceUsers")
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    order_by: Optional[OrderBy] = Field(default=None, alias="orderBy")
    __properties: ClassVar[List[str]] = ["realmPredicate", "assets", "pathPredicate", "ids", "select", "usernames", "attributes", "clientRoles", "realmRoles", "serviceUsers", "limit", "offset", "orderBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of realm_predicate
        if self.realm_predicate:
            _dict['realmPredicate'] = self.realm_predicate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_predicate
        if self.path_predicate:
            _dict['pathPredicate'] = self.path_predicate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of select
        if self.select:
            _dict['select'] = self.select.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in usernames (list)
        _items = []
        if self.usernames:
            for _item_usernames in self.usernames:
                if _item_usernames:
                    _items.append(_item_usernames.to_dict())
            _dict['usernames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_roles (list)
        _items = []
        if self.client_roles:
            for _item_client_roles in self.client_roles:
                if _item_client_roles:
                    _items.append(_item_client_roles.to_dict())
            _dict['clientRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in realm_roles (list)
        _items = []
        if self.realm_roles:
            for _item_realm_roles in self.realm_roles:
                if _item_realm_roles:
                    _items.append(_item_realm_roles.to_dict())
            _dict['realmRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of order_by
        if self.order_by:
            _dict['orderBy'] = self.order_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "realmPredicate": RealmPredicate.from_dict(obj["realmPredicate"]) if obj.get("realmPredicate") is not None else None,
            "assets": obj.get("assets"),
            "pathPredicate": PathPredicate.from_dict(obj["pathPredicate"]) if obj.get("pathPredicate") is not None else None,
            "ids": obj.get("ids"),
            "select": Select.from_dict(obj["select"]) if obj.get("select") is not None else None,
            "usernames": [StringPredicate.from_dict(_item) for _item in obj["usernames"]] if obj.get("usernames") is not None else None,
            "attributes": [AttributeValuePredicate.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "clientRoles": [StringPredicate.from_dict(_item) for _item in obj["clientRoles"]] if obj.get("clientRoles") is not None else None,
            "realmRoles": [StringPredicate.from_dict(_item) for _item in obj["realmRoles"]] if obj.get("realmRoles") is not None else None,
            "serviceUsers": obj.get("serviceUsers"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "orderBy": OrderBy.from_dict(obj["orderBy"]) if obj.get("orderBy") is not None else None
        })
        return _obj


