# {{{projectName}}}

`openremote-openapi-client` is an auto-generated Python client library for the OpenRemote Manager REST API.  
It includes an `AuthenticatedApiClient` that seamlessly manages Keycloak OAuth2 authentication.  

Refer to the official [OpenRemote documentation](https://docs.openremote.io/) for details on the platform.  

## Features

- **Auto-generated** from the OpenAPI specification using OpenAPI Generator  
- **Built-in OAuth2 support** with Keycloak, using a helper class that handles the authentication flow automatically  
- **Full coverage** of OpenRemote Manager API endpoints  

This package is generated by the [OpenAPI Generator](https://openapi-generator.tech):  

- API version: {{appVersion}}  
- Package version: {{packageVersion}}  
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}  
{{/hideGenerationTimestamp}}
- Generator version: {{generatorVersion}}  
- Generator class: {{generatorClass}}  
{{#infoUrl}}
For more information, see [{{{infoUrl}}}]({{{infoUrl}}}).  
{{/infoUrl}}

## Installation

```bash
pip install {{{packageName}}}
```

Or, if youâ€™re using [uv](https://github.com/astral-sh/uv):

```bash
uv add {{{packageName}}}
```

## Quick Start

```python
from {{{packageName}}} import AuthenticatedApiClient, StatusApi, AssetApi, AssetQuery

# Create an authenticated client
client = AuthenticatedApiClient(
    base_url="http://localhost:8080/api/master",
    keycloak_url="http://localhost:8081/auth",
    client_id="serviceuser",
    client_secret="your_secret",
    realm="master"
)

# Health check
status_api = StatusApi(client)
health = status_api.get_health_status()
print(f"System health: {health}")

# Query assets
asset_api = AssetApi(client)
assets = asset_api.query_assets(asset_query=AssetQuery(limit=10))
print(f"Found {len(assets)} assets")
```

{{> common_README }}
