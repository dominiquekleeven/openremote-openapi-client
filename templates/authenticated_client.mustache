# coding: utf-8

{{>partial_header}}

import httpx
import logging
from typing import Optional
from {{packageName}}.configuration import Configuration
from {{packageName}}.api_client import ApiClient

logger = logging.getLogger(__name__)


class AuthenticatedApiClient(ApiClient):
    """API client that automatically handles Keycloak OAuth2 authentication"""
    
    def __init__(
        self,
        base_url: str,
        keycloak_url: str,
        client_id: str,
        client_secret: str,
        realm: str = "master",
        timeout: float = 30.0,
        configuration: Optional[Configuration] = None
    ):
        self.keycloak_url = keycloak_url.rstrip('/')
        self.client_id = client_id
        self.client_secret = client_secret
        self.realm = realm
        self.timeout = timeout
        
        # Token management
        self._access_token: Optional[str] = None
        self._token_expires_in: Optional[int] = None
        
        # Create configuration with base URL
        if configuration is None:
            configuration = Configuration(host=base_url)
        else:
            configuration.host = base_url
            
        # Initialize parent ApiClient
        super().__init__(configuration)
        
        # Authenticate immediately
        self._authenticate()
    
    def _authenticate(self) -> None:
        """Authenticate with Keycloak and get access token"""
        token_url = f"{self.keycloak_url}/realms/{self.realm}/protocol/openid-connect/token"
        
        data = {
            "grant_type": "client_credentials",
            "client_id": self.client_id,
            "client_secret": self.client_secret
        }
        
        try:
            with httpx.Client(timeout=self.timeout) as client:
                response = client.post(token_url, data=data)
                response.raise_for_status()
                
                token_data = response.json()
                self._access_token = token_data["access_token"]
                self._token_expires_in = token_data.get("expires_in", 3600)
                
                # Update configuration with token
                self.configuration.access_token = self._access_token
                
                logger.info(f"Authentication successful (expires in {self._token_expires_in}s)")
                
        except httpx.HTTPError as e:
            logger.error(f"Authentication failed: {e}")
            raise Exception(f"Failed to authenticate with Keycloak: {e}")
    
    @property
    def is_authenticated(self) -> bool:
        """Check if the client is currently authenticated"""
        return self._access_token is not None
    
    @property
    def token_expires_in(self) -> Optional[int]:
        """Get token expiration time in seconds"""
        return self._token_expires_in
    
    def refresh_token(self) -> None:
        """Refresh the access token"""
        self._authenticate()
