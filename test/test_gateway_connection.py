# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501



import unittest

from or_rest_client.models.gateway_connection import GatewayConnection

class TestGatewayConnection(unittest.TestCase):
    """GatewayConnection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GatewayConnection:
        """Test GatewayConnection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GatewayConnection`
        """
        model = GatewayConnection()
        if include_optional:
            return GatewayConnection(
                local_realm = '',
                host = '0',
                port = 1,
                realm = '',
                client_id = '0',
                client_secret = '01234567891011121314151617181920212223242526272829303132333435',
                secured = True,
                attribute_filters = [
                    or_rest_client.models.gateway_attribute_filter.GatewayAttributeFilter(
                        matcher = or_rest_client.models.asset_query.AssetQuery(
                            recursive = True, 
                            select = or_rest_client.models.select.Select(
                                basic = True, ), 
                            access = 'PRIVATE', 
                            ids = [
                                ''
                                ], 
                            names = [
                                or_rest_client.models.string_predicate.StringPredicate(
                                    match = 'EXACT', 
                                    case_sensitive = True, 
                                    value = '', 
                                    negate = True, )
                                ], 
                            parents = [
                                or_rest_client.models.parent_predicate.ParentPredicate(
                                    id = '', )
                                ], 
                            paths = [
                                or_rest_client.models.path_predicate.PathPredicate(
                                    path = [
                                        ''
                                        ], )
                                ], 
                            realm = or_rest_client.models.realm_predicate.RealmPredicate(
                                name = '', ), 
                            user_ids = [
                                ''
                                ], 
                            types = [
                                ''
                                ], 
                            attributes = or_rest_client.models.logic_group_attribute_predicate.LogicGroupAttributePredicate(
                                operator = 'AND', 
                                items = [
                                    or_rest_client.models.attribute_predicate.AttributePredicate(
                                        name = or_rest_client.models.string_predicate.StringPredicate(
                                            match = 'EXACT', 
                                            case_sensitive = True, 
                                            value = '', 
                                            negate = True, ), 
                                        negated = True, 
                                        value = or_rest_client.models.value_predicate.ValuePredicate(
                                            predicate_type = '', ), 
                                        meta = [
                                            or_rest_client.models.name_value_predicate.NameValuePredicate(
                                                negated = True, )
                                            ], 
                                        previous_value = or_rest_client.models.value_predicate.ValuePredicate(
                                            predicate_type = '', ), 
                                        timestamp_older_than = '', )
                                    ], 
                                groups = [
                                    or_rest_client.models.logic_group_attribute_predicate.LogicGroupAttributePredicate(
                                        operator = 'AND', )
                                    ], ), 
                            order_by = or_rest_client.models.order_by.OrderBy(
                                property = 'CREATED_ON', 
                                descending = True, ), 
                            limit = 56, ), 
                        duration = '', 
                        delta = 1.337, 
                        value_change = True, 
                        skip_always = True, 
                        duration_parsed_millis = 56, )
                    ],
                asset_sync_rules = {
                    'key' : or_rest_client.models.gateway_asset_sync_rule.GatewayAssetSyncRule(
                        exclude_attributes = [
                            ''
                            ], 
                        exclude_attribute_meta = {
                            'key' : [
                                ''
                                ]
                            }, 
                        add_attribute_meta = {
                            'key' : {
                                'key' : or_rest_client.models.meta_item_object.MetaItemObject(
                                    type = or_rest_client.models.value_descriptor_object.ValueDescriptorObject(
                                        name = 'H', 
                                        constraints = [
                                            or_rest_client.models.value_constraint.ValueConstraint(
                                                message = '', 
                                                type = '', )
                                            ], 
                                        format = or_rest_client.models.value_format.ValueFormat(
                                            use_grouping = True, 
                                            minimum_integer_digits = 56, 
                                            minimum_fraction_digits = 56, 
                                            maximum_fraction_digits = 56, 
                                            minimum_significant_digits = 56, 
                                            maximum_significant_digits = 56, 
                                            as_boolean = True, 
                                            as_date = True, 
                                            as_slider = True, 
                                            resolution = 1.337, 
                                            date_style = 'numeric', 
                                            time_style = 'numeric', 
                                            day_period = 'numeric', 
                                            hour12 = True, 
                                            iso8601 = True, 
                                            weekday = 'numeric', 
                                            era = 'numeric', 
                                            year = 'numeric', 
                                            month = 'numeric', 
                                            week = 'numeric', 
                                            day = 'numeric', 
                                            hour = 'numeric', 
                                            minute = 'numeric', 
                                            second = 'numeric', 
                                            fractional_second_digits = 56, 
                                            time_zone_name = 'numeric', 
                                            moment_js_format = '', 
                                            as_number = True, 
                                            as_on_off = True, 
                                            as_pressed_released = True, 
                                            as_open_closed = True, 
                                            as_momentary = True, 
                                            multiline = True, ), 
                                        units = [
                                            ''
                                            ], 
                                        array_dimensions = 56, 
                                        meta_use_only = True, 
                                        json_type = '', ), 
                                    value = or_rest_client.models.value.value(), 
                                    name = 'H0', )
                                }
                            }, )
                    },
                disabled = True
            )
        else:
            return GatewayConnection(
                host = '0',
                client_id = '0',
                client_secret = '01234567891011121314151617181920212223242526272829303132333435',
        )
        """

    def testGatewayConnection(self):
        """Test GatewayConnection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
