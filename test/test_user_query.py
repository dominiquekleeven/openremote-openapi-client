# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501



import unittest

from or_rest_client.models.user_query import UserQuery

class TestUserQuery(unittest.TestCase):
    """UserQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserQuery:
        """Test UserQuery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserQuery`
        """
        model = UserQuery()
        if include_optional:
            return UserQuery(
                realm_predicate = or_rest_client.models.realm_predicate.RealmPredicate(
                    name = '', ),
                assets = [
                    ''
                    ],
                path_predicate = or_rest_client.models.path_predicate.PathPredicate(
                    path = [
                        ''
                        ], ),
                ids = [
                    ''
                    ],
                select = or_rest_client.models.select.Select(
                    basic = True, ),
                usernames = [
                    or_rest_client.models.string_predicate.StringPredicate(
                        match = 'EXACT', 
                        case_sensitive = True, 
                        value = '', 
                        negate = True, )
                    ],
                attributes = [
                    or_rest_client.models.attribute_value_predicate.AttributeValuePredicate(
                        negated = True, 
                        name = or_rest_client.models.string_predicate.StringPredicate(
                            match = 'EXACT', 
                            case_sensitive = True, 
                            value = '', 
                            negate = True, ), 
                        value = or_rest_client.models.string_predicate.StringPredicate(
                            match = 'EXACT', 
                            case_sensitive = True, 
                            negate = True, ), )
                    ],
                client_roles = [
                    or_rest_client.models.string_predicate.StringPredicate(
                        match = 'EXACT', 
                        case_sensitive = True, 
                        value = '', 
                        negate = True, )
                    ],
                realm_roles = [
                    or_rest_client.models.string_predicate.StringPredicate(
                        match = 'EXACT', 
                        case_sensitive = True, 
                        value = '', 
                        negate = True, )
                    ],
                service_users = True,
                limit = 56,
                offset = 56,
                order_by = or_rest_client.models.order_by.OrderBy(
                    property = 'CREATED_ON', 
                    descending = True, )
            )
        else:
            return UserQuery(
        )
        """

    def testUserQuery(self):
        """Test UserQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
