# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501



import unittest

from or_rest_client.models.map_config import MapConfig

class TestMapConfig(unittest.TestCase):
    """MapConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MapConfig:
        """Test MapConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MapConfig`
        """
        model = MapConfig()
        if include_optional:
            return MapConfig(
                override = '',
                options = {
                    'key' : or_rest_client.models.map_realm_config.MapRealmConfig(
                        center = [
                            1.337
                            ], 
                        bounds = [
                            1.337
                            ], 
                        zoom = 56, 
                        min_zoom = 56, 
                        max_zoom = 56, 
                        box_zoom = True, 
                        geocode_url = '', 
                        geo_json = or_rest_client.models.geo_json_config.GeoJsonConfig(
                            source = or_rest_client.models.source.source(), 
                            layers = [
                                None
                                ], ), )
                    },
                sources = {
                    'key' : or_rest_client.models.map_source_config.MapSourceConfig(
                        type = '', 
                        url = '', 
                        tiles = [
                            ''
                            ], 
                        bounds = [
                            1.337
                            ], 
                        scheme = '', 
                        minzoom = 56, 
                        maxzoom = 56, 
                        attribution = '', 
                        custom = True, )
                    },
                glyphs = '',
                sprite = '',
                layers = [
                    None
                    ]
            )
        else:
            return MapConfig(
        )
        """

    def testMapConfig(self):
        """Test MapConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
