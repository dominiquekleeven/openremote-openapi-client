# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501



import unittest

from or_rest_client.models.gateway_attribute_filter import GatewayAttributeFilter

class TestGatewayAttributeFilter(unittest.TestCase):
    """GatewayAttributeFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GatewayAttributeFilter:
        """Test GatewayAttributeFilter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GatewayAttributeFilter`
        """
        model = GatewayAttributeFilter()
        if include_optional:
            return GatewayAttributeFilter(
                matcher = or_rest_client.models.asset_query.AssetQuery(
                    recursive = True, 
                    select = or_rest_client.models.select.Select(
                        basic = True, ), 
                    access = 'PRIVATE', 
                    ids = [
                        ''
                        ], 
                    names = [
                        or_rest_client.models.string_predicate.StringPredicate(
                            match = 'EXACT', 
                            case_sensitive = True, 
                            value = '', 
                            negate = True, )
                        ], 
                    parents = [
                        or_rest_client.models.parent_predicate.ParentPredicate(
                            id = '', )
                        ], 
                    paths = [
                        or_rest_client.models.path_predicate.PathPredicate(
                            path = [
                                ''
                                ], )
                        ], 
                    realm = or_rest_client.models.realm_predicate.RealmPredicate(
                        name = '', ), 
                    user_ids = [
                        ''
                        ], 
                    types = [
                        ''
                        ], 
                    attributes = or_rest_client.models.logic_group_attribute_predicate.LogicGroupAttributePredicate(
                        operator = 'AND', 
                        items = [
                            or_rest_client.models.attribute_predicate.AttributePredicate(
                                name = or_rest_client.models.string_predicate.StringPredicate(
                                    match = 'EXACT', 
                                    case_sensitive = True, 
                                    value = '', 
                                    negate = True, ), 
                                negated = True, 
                                value = or_rest_client.models.value_predicate.ValuePredicate(
                                    predicate_type = '', ), 
                                meta = [
                                    or_rest_client.models.name_value_predicate.NameValuePredicate(
                                        negated = True, )
                                    ], 
                                previous_value = or_rest_client.models.value_predicate.ValuePredicate(
                                    predicate_type = '', ), 
                                timestamp_older_than = '', )
                            ], 
                        groups = [
                            or_rest_client.models.logic_group_attribute_predicate.LogicGroupAttributePredicate(
                                operator = 'AND', )
                            ], ), 
                    order_by = or_rest_client.models.order_by.OrderBy(
                        property = 'CREATED_ON', 
                        descending = True, ), 
                    limit = 56, ),
                duration = '',
                delta = 1.337,
                value_change = True,
                skip_always = True,
                duration_parsed_millis = 56
            )
        else:
            return GatewayAttributeFilter(
        )
        """

    def testGatewayAttributeFilter(self):
        """Test GatewayAttributeFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
