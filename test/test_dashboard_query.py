# coding: utf-8

"""
    OpenRemote Manager REST API

    This is the documentation for the OpenRemote Manager HTTP REST API.  Please see the [documentation](https://docs.openremote.io) for more info.

    The version of the OpenAPI document: 3.0.0
    Contact: info@openremote.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501



import unittest

from or_rest_client.models.dashboard_query import DashboardQuery

class TestDashboardQuery(unittest.TestCase):
    """DashboardQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DashboardQuery:
        """Test DashboardQuery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DashboardQuery`
        """
        model = DashboardQuery()
        if include_optional:
            return DashboardQuery(
                select = or_rest_client.models.select.Select(
                    basic = True, ),
                conditions = or_rest_client.models.conditions.Conditions(
                    dashboard = or_rest_client.models.dashboard_conditions.DashboardConditions(
                        access = [
                            'PUBLIC'
                            ], ), 
                    asset = or_rest_client.models.asset_conditions.AssetConditions(
                        min_amount = 'AT_LEAST_ONE', 
                        parents = [
                            or_rest_client.models.parent_predicate.ParentPredicate(
                                id = '', )
                            ], ), ),
                ids = [
                    ''
                    ],
                names = [
                    or_rest_client.models.string_predicate.StringPredicate(
                        match = 'EXACT', 
                        case_sensitive = True, 
                        value = '', 
                        negate = True, )
                    ],
                user_ids = [
                    ''
                    ],
                realm = or_rest_client.models.realm_predicate.RealmPredicate(
                    name = '', ),
                start = 56,
                limit = 56
            )
        else:
            return DashboardQuery(
        )
        """

    def testDashboardQuery(self):
        """Test DashboardQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
